data Elemento = UnElemento { 
    tipo :: String,
    ataque :: (Personaje-> Personaje),
    defensa :: (Personaje-> Personaje) 
}

data Personaje = UnPersonaje { 
    nombre :: String,
    salud :: Float,
    elementos :: [Elemento],
    anioPresente :: Int 
}

-- PUNTO 1
-- A
mandarAlAnio :: Int -> Personaje -> Personaje
mandarAlAnio anio personaje = personaje{ anioPresente = anio }

-- B
meditar :: Personaje -> Personaje
meditar personaje = modificarSalud (*1.5)

-- C
causarDanio :: Float -> Personaje -> Personaje
causarDanio danio = modificarSalud (max 0 . flip (-) danio)

modificarSalud :: (Float -> Float) -> Personaje -> Personaje
modificarSalud transformacion personaje = personaje { salud = (transformacion . salud ) personaje }

-- PUNTO 2
-- A
esMalvado :: Personaje -> Bool
esMalvado personaje = any (esTipo "Maldad") . elementos) personaje

esTipo :: String -> Elemento -> Bool
esTipo unTipo elemento = tipo elemento == unTipo

-- B
danioQueProduce :: Personaje -> Elemento -> Float
danioQueProduce personaje elemento = salud personaje - salud (ataque elemento personaje)

-- C
enemigosMortales :: Personaje -> [Personaje] -> [Personaje]
enemigosMortales personaje listaDeEnemigos = filter (esEnemigoMortal personaje) listaDeEnemigos

esEnemigoMortal :: Personaje -> Personaje -> Bool
esEnemigoMortal personaje enemigo = (any ( tieneAtaqueMortal personaje) . elementos) enemigo

tieneAtaqueMortal :: Personaje -> Elemento -> Bool
tieneAtaqueMortal personaje elemento = danioQueProduce personaje elemento == salud personaje

-- PUNTO 3
noHacerNada = id
-- A
concentracion :: Int -> Elemento 
concentracion nivelConcentracion =UnElemento{ tipo = "Magia", ataque = noHacerNada, defensa = foldr1 (.) (replicate nivelDeConcentracion meditar) }
-- B
esbirrosMalvados :: Int -> [Elemento]
esbirrosMalvados cantidad = replicate cantidad unEsbirro

unEsbirro :: Elemento
unEsbirro = UnElemento "Maldad" (causarDanio 1) noHacerNada

-- C
jack :: Personaje
jack = UnPersonaje "Jack" 300 [concentracion 3, katanaMagica] 200

katanaMagica :: Elemento
katanaMagica = UnElemento "Magia" (causarDanio 1000) noHacerNada

-- D
aku :: Int -> Float -> Personaje
aku anio saludInicial = UnPersonaje{ nombre = "Aku", salud = saludInicial, anioPresente = anio, elementos = concentracion 4 : portalAlFuturo anio : esbirrosMalvados(100 * anio) }

portalAlFuturo :: Int -> Elemento
portalAlFuturo anio = UnElemento "Magia" (mandarAlAnio anioFuturo) (aku anioFuturo . salud)
    where anioFuturo = anio + 2800

-- PUNTO 4
luchar :: Personaje -> Personaje -> (Personaje, Personaje)
luchar atacante defensor
 |estaMuerto atacante = (defensor, atacante)
 |otherwise = luchar proximoAtacante proximoDefensor
 where proximoAtacante = usarElementos ataque defensor (elementos atacante)
       proximoDefensor = usarElementos defensa atacante (elementos atacante)

usarElementos :: (Elemento -> Personaje -> Personaje) -> Personaje -> [Elemento] -> Personaje
usarElementos funcion personaje elementos = foldl afectar personaje (map funcion elementos)

afectar = flip ($)

-- PUNTO 5
-- f :: (Eq t1, Num t2) => (t1 -> a1 ( a2,a2 )) -> (t2 -> t1) -> t1 -> [a1] -> [a2] 
f x y z
    | y 0 == z = map (fst.x z)
    | otherwise = map (snd.x (y 0))
